===========================================
🚀 MANUAL DE DESARROLLO - IDENTITY SERVER
===========================================

📋 CONTENIDO:
1. Abrir código fuente en Visual Studio Code/Community
2. Ejecutar aplicación móvil (React Native/Expo)
3. Ejecutar aplicación desktop (Electron)
4. Configuración completa del sistema

===========================================
1️⃣ ABRIR CÓDIGO FUENTE
===========================================

🔹 VISUAL STUDIO CODE:
   1. Abrir Visual Studio Code
   2. File > Open Folder
   3. Navegar a: C:\SC\Code\advian-identity
   4. Seleccionar la carpeta y hacer click en "Seleccionar carpeta"
   5. VSCode abrirá todo el workspace con todos los proyectos

   📁 Estructura que verás:
   ├── src/
   │   ├── IdentityServer.Api/     # Servidor de identidad (.NET)
   │   ├── IdentityServer.Web/     # UI web del servidor (.NET)
   │   ├── SampleApp1,2,3/         # Apps de ejemplo (Blazor)
   │   ├── SampleBack1/            # API protegida (.NET)
   │   ├── MobileApp/              # App móvil (React Native/Expo)
   │   └── DesktopApp/             # App desktop (Electron)

🔹 VISUAL STUDIO COMMUNITY:
   1. Abrir Visual Studio Community
   2. File > Open > Folder
   3. Navegar a: C:\SC\Code\advian-identity\src
   4. Seleccionar la carpeta "src"
   5. VS detectará automáticamente los proyectos .NET

   📋 Proyectos .NET que verás:
   - IdentityServer.Api.csproj
   - IdentityServer.Web.csproj
   - SampleApp1.csproj, SampleApp2.csproj, SampleApp3.csproj
   - SampleBack1.csproj

===========================================
2️⃣ EJECUTAR APLICACIÓN MÓVIL
===========================================

📱 PRERREQUISITOS:
   ✅ Node.js instalado
   ✅ npm disponible
   ✅ (Opcional) Android Studio para emulador

🔹 PASO A PASO:

   1️⃣ ABRIR TERMINAL:
      - En VSCode: Terminal > New Terminal
      - O usar terminal del sistema

   2️⃣ NAVEGAR A LA CARPETA MÓVIL:
      cd C:\SC\Code\advian-identity\src\MobileApp

   3️⃣ INSTALAR DEPENDENCIAS (primera vez):
      npm install

   4️⃣ EJECUTAR LA APP:
      
      🌐 PARA WEB (más fácil para testing):
      npm run web
      ➡️ Se abrirá en: http://localhost:8081
      
      📱 PARA ANDROID (requiere emulador):
      npm run android
      ➡️ Necesitas Android Studio con emulador corriendo
      
      🍎 PARA iOS (solo en macOS):
      npm run ios
      ➡️ Necesitas Xcode (solo funciona en Mac)

   5️⃣ QR CODE (EXPO):
      - Al correr cualquier comando, aparecerá un QR code
      - Instalar "Expo Go" en tu teléfono
      - Escanear el QR code para probar en dispositivo real

📋 TESTING DE LA APP MÓVIL:
   1. La app se abrirá mostrando pantalla de login
   2. Click "Sign In with Identity Server"
   3. Se abrirá navegador web para autenticación
   4. Usar credenciales: admin@example.com / Admin123!
   5. Autorizar y volver a la app
   6. Probar los botones de API testing

===========================================
3️⃣ EJECUTAR APLICACIÓN DESKTOP
===========================================

🖥️ PRERREQUISITOS:
   ✅ Node.js instalado
   ✅ npm disponible

🔹 PASO A PASO:

   1️⃣ ABRIR TERMINAL:
      - En VSCode: Terminal > New Terminal
      - O usar terminal del sistema

   2️⃣ NAVEGAR A LA CARPETA DESKTOP:
      cd C:\SC\Code\advian-identity\src\DesktopApp

   3️⃣ INSTALAR DEPENDENCIAS (primera vez):
      npm install

   4️⃣ EJECUTAR LA APP:
      
      🔧 MODO DESARROLLO:
      npm run dev
      
      🚀 MODO PRODUCCIÓN:
      npm start
      
      📦 COMPILAR EJECUTABLE:
      npm run build         # Para todas las plataformas
      npm run build-win     # Solo Windows
      npm run build-mac     # Solo macOS
      npm run build-linux   # Solo Linux

   5️⃣ LA APP SE ABRIRÁ:
      - Ventana de Electron con pantalla de login
      - No requiere navegador adicional
      - Todo funciona dentro de la aplicación

📋 TESTING DE LA APP DESKTOP:
   1. Se abrirá ventana con botón "Sign In"
   2. Click "Sign In" - se abre navegador web
   3. Autenticar con: admin@example.com / Admin123!
   4. Cerrar navegador - volver a app desktop
   5. Se abrirá dashboard principal
   6. Probar botones de API testing
   7. Ver información de tokens en tiempo real

===========================================
4️⃣ CONFIGURACIÓN COMPLETA DEL SISTEMA
===========================================

🔹 PARA TESTING COMPLETO NECESITAS EJECUTAR:

   1️⃣ IDENTITY SERVER (OBLIGATORIO):
      cd C:\SC\Code\advian-identity\src\IdentityServer.Api
      dotnet run
      ➡️ Corre en: http://localhost:5001

   2️⃣ API PROTEGIDA (para testing de APIs):
      cd C:\SC\Code\advian-identity\src\SampleBack1
      dotnet run
      ➡️ Corre en: https://localhost:6001

   3️⃣ SAMPLE APPS WEB (opcional):
      cd C:\SC\Code\advian-identity\src\SampleApp1
      dotnet run
      ➡️ Corre en: https://localhost:7001

   4️⃣ UI DEL IDENTITY SERVER (opcional):
      cd C:\SC\Code\advian-identity\src\IdentityServer.Web
      dotnet run
      ➡️ Corre en: https://localhost:7000

🔹 ORDEN RECOMENDADO DE EJECUCIÓN:
   1. Primero: IdentityServer.Api
   2. Segundo: SampleBack1 (para APIs protegidas)
   3. Tercero: App móvil o desktop
   4. Último: Sample apps web (opcional)

🔹 CREDENCIALES DE TESTING:
   📧 Email: admin@example.com
   🔒 Password: Admin123!
   
   📧 Email: user@example.com
   🔒 Password: User123!

🔹 PUERTOS UTILIZADOS:
   - Identity Server API: http://localhost:5001
   - Identity Server Web: https://localhost:7000
   - Sample App 1: https://localhost:7001
   - Sample App 2: https://localhost:7002
   - Sample App 3: https://localhost:7003
   - Protected API: https://localhost:6001
   - Mobile App: http://localhost:8081
   - Desktop App: (aplicación nativa)

===========================================
🛠️ TROUBLESHOOTING
===========================================

❌ PROBLEMA: "Port already in use"
✅ SOLUCIÓN: 
   - Cerrar aplicaciones que usen esos puertos
   - O cambiar puertos en launchSettings.json

❌ PROBLEMA: "npm install fails"
✅ SOLUCIÓN:
   - Verificar Node.js instalado: node --version
   - Limpiar cache: npm cache clean --force
   - Reinstalar: rm -rf node_modules && npm install

❌ PROBLEMA: "dotnet command not found"
✅ SOLUCIÓN:
   - Instalar .NET 8 SDK desde microsoft.com
   - Verificar instalación: dotnet --version

❌ PROBLEMA: "Certificate errors"
✅ SOLUCIÓN:
   - Solo para desarrollo: dotnet dev-certs https --trust
   - Las apps móvil/desktop ya están configuradas para localhost

❌ PROBLEMA: "CORS errors"
✅ SOLUCIÓN:
   - Los proyectos ya tienen CORS configurado
   - Verificar que IdentityServer.Api esté corriendo

===========================================
📚 INFORMACIÓN ADICIONAL
===========================================

🔍 LOGS Y DEBUGGING:
   - Consola del navegador para apps web
   - Terminal donde ejecutaste los comandos
   - DevTools de Electron (F12 en desktop app)
   - Metro bundler logs para React Native

📝 MODIFICAR CÓDIGO:
   - Cambios en .NET: requieren reiniciar dotnet run
   - Cambios en React Native: hot reload automático
   - Cambios en Electron: reiniciar npm start/dev

🔒 SEGURIDAD:
   - Tokens expiran en 5 minutos (para testing)
   - Refresh tokens duran 30 días
   - Almacenamiento seguro en cada plataforma

🎯 CASOS DE USO:
   - Web: SampleApp1, SampleApp2, SampleApp3
   - Móvil: MobileApp (iOS/Android/Web)
   - Desktop: DesktopApp (Windows/macOS/Linux)
   - API: SampleBack1 (protegida con JWT)

===========================================
✅ ¡LISTO PARA DESARROLLAR!
===========================================

Con este manual puedes:
✅ Abrir el código en tu editor favorito
✅ Ejecutar todas las aplicaciones
✅ Probar el flujo completo de autenticación
✅ Desarrollar nuevas funcionalidades
✅ Debuggear problemas

¡Happy coding! 🚀