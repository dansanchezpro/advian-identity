@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation


<PageTitle>Sign In - Identity Server</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Sign In</h3>
                    @if (!string.IsNullOrEmpty(clientName))
                    {
                        <p class="text-center text-muted">@clientName is requesting access to your account</p>
                    }
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input @bind="loginModel.Email" class="form-control" id="email" placeholder="Enter your email" type="email" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input @bind="loginModel.Password" type="password" class="form-control" id="password" placeholder="Enter your password" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-primary" disabled="@isLoading" @onclick="HandleLogin">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span>Signing in...</span>
                                }
                                else
                                {
                                    <span>Sign In</span>
                                }
                            </button>
                        </div>
                    </div>

                    <hr class="my-4">
                    
                    <div class="d-grid gap-2">
                        <button class="btn btn-danger" @onclick="HandleGoogleLogin" disabled="@isLoading">
                            Sign in with Google
                        </button>
                        <button class="btn btn-primary" @onclick="HandleMicrosoftLogin" disabled="@isLoading">
                            Sign in with Microsoft
                        </button>
                        <button class="btn btn-dark" @onclick="HandleAppleLogin" disabled="@isLoading">
                            Sign in with Apple
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(clientId))
                    {
                        <div class="mt-3 text-center">
                            <small class="text-muted">
                                Demo credentials: admin@example.com / Admin123! or user@example.com / User123!
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] [SupplyParameterFromQuery] public string? client_id { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? redirect_uri { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? response_type { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? scope { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? state { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? code_challenge { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? code_challenge_method { get; set; }
    [Parameter] [SupplyParameterFromQuery] public bool api_callback { get; set; }

    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string clientName = string.Empty;
    private string clientId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        clientId = client_id ?? string.Empty;
        
        // Store parameters to avoid losing them during form submission
        if (!string.IsNullOrEmpty(client_id))
        {
            await JSRuntime.InvokeVoidAsync("debugLog", $"OnInitialized - client_id: {client_id}, redirect_uri: {redirect_uri}");
        }
        
        if (!string.IsNullOrEmpty(clientId))
        {
            try
            {
                var response = await Http.GetAsync($"https://localhost:5000/api/clients/{clientId}");
                if (response.IsSuccessStatusCode)
                {
                    var clientInfo = await response.Content.ReadFromJsonAsync<ClientInfo>();
                    clientName = clientInfo?.ClientName ?? clientId;
                }
                else
                {
                    clientName = clientId;
                }
            }
            catch
            {
                clientName = clientId;
            }
        }
    }

    private async Task HandleLogin()
    {
        if (isLoading) return;
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            await JSRuntime.InvokeVoidAsync("debugLog", $"HandleLogin started - api_callback: {api_callback}");
            
            // Always use OIDC form submission for consistency
            await HandleOidcFormSubmission();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("debugLog", $"Exception in HandleLogin: {ex.Message}");
            errorMessage = "An error occurred during login. Please try again.";
            isLoading = false;
        }
    }

    private async Task HandleOidcFormSubmission()
    {
        await JSRuntime.InvokeVoidAsync("debugLog", "Submitting OIDC form to API via browser navigation...");

        // Build form submission URL with query parameters for GET request first
        var queryParams = new List<string>
        {
            $"email={Uri.EscapeDataString(loginModel.Email)}",
            $"password={Uri.EscapeDataString(loginModel.Password)}",
            $"client_id={Uri.EscapeDataString(client_id ?? "")}",
            $"redirect_uri={Uri.EscapeDataString(redirect_uri ?? "")}",
            $"response_type={Uri.EscapeDataString(response_type ?? "code")}",
            $"scope={Uri.EscapeDataString(scope ?? "")}"
        };

        if (!string.IsNullOrEmpty(state))
            queryParams.Add($"state={Uri.EscapeDataString(state)}");
        if (!string.IsNullOrEmpty(code_challenge))
            queryParams.Add($"code_challenge={Uri.EscapeDataString(code_challenge)}");
        if (!string.IsNullOrEmpty(code_challenge_method))
            queryParams.Add($"code_challenge_method={Uri.EscapeDataString(code_challenge_method)}");

        // Create a direct form submission using JSInterop
        await JSRuntime.InvokeVoidAsync("submitOidcForm", new
        {
            email = loginModel.Email,
            password = loginModel.Password,
            client_id = client_id ?? "",
            redirect_uri = redirect_uri ?? "",
            response_type = response_type ?? "code",
            scope = scope ?? "",
            state = state ?? "",
            code_challenge = code_challenge ?? "",
            code_challenge_method = code_challenge_method ?? ""
        });
    }

    private async Task HandleExternalLogin(string provider)
    {
        if (isLoading) return;
        isLoading = true;

        try
        {
            var returnUrl = BuildReturnUrl();
            var externalUrl = $"https://localhost:5000/api/auth/external/{provider.ToLower()}?returnUrl={Uri.EscapeDataString(returnUrl)}";
            await JSRuntime.InvokeVoidAsync("open", externalUrl, "_self");
        }
        catch
        {
            errorMessage = "An error occurred during external login. Please try again.";
            isLoading = false;
        }
    }

    private async Task HandleGoogleLogin()
    {
        await HandleExternalLogin("Google");
    }

    private async Task HandleMicrosoftLogin()
    {
        await HandleExternalLogin("Microsoft");
    }

    private async Task HandleAppleLogin()
    {
        await HandleExternalLogin("Apple");
    }


    private string BuildReturnUrl()
    {
        var queryParams = new List<string>();
        
        if (!string.IsNullOrEmpty(client_id))
            queryParams.Add($"client_id={Uri.EscapeDataString(client_id)}");
        if (!string.IsNullOrEmpty(redirect_uri))
            queryParams.Add($"redirect_uri={Uri.EscapeDataString(redirect_uri)}");
        if (!string.IsNullOrEmpty(response_type))
            queryParams.Add($"response_type={Uri.EscapeDataString(response_type)}");
        if (!string.IsNullOrEmpty(scope))
            queryParams.Add($"scope={Uri.EscapeDataString(scope)}");
        if (!string.IsNullOrEmpty(state))
            queryParams.Add($"state={Uri.EscapeDataString(state)}");
        if (!string.IsNullOrEmpty(code_challenge))
            queryParams.Add($"code_challenge={Uri.EscapeDataString(code_challenge)}");
        if (!string.IsNullOrEmpty(code_challenge_method))
            queryParams.Add($"code_challenge_method={Uri.EscapeDataString(code_challenge_method)}");

        var baseUrl = Navigation.ToAbsoluteUri("/external-callback").ToString();
        return queryParams.Any() ? $"{baseUrl}?{string.Join("&", queryParams)}" : baseUrl;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    public class ClientInfo
    {
        public string ClientName { get; set; } = string.Empty;
    }
}