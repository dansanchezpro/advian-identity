@page "/external-callback"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Processing Login...</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3">Processing your login...</p>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">@errorMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] [SupplyParameterFromQuery] public string? client_id { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? redirect_uri { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? response_type { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? scope { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? state { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? code_challenge { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? code_challenge_method { get; set; }

    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000); // Give some visual feedback
        
        try
        {
            if (!string.IsNullOrEmpty(client_id) && !string.IsNullOrEmpty(redirect_uri))
            {
                // This should be handled by the backend's external login callback
                // For now, redirect back to login with parameters
                var loginUrl = $"/login?client_id={Uri.EscapeDataString(client_id)}&redirect_uri={Uri.EscapeDataString(redirect_uri)}&response_type={Uri.EscapeDataString(response_type ?? "code")}&scope={Uri.EscapeDataString(scope ?? "openid")}";
                
                if (!string.IsNullOrEmpty(state))
                    loginUrl += $"&state={Uri.EscapeDataString(state)}";
                if (!string.IsNullOrEmpty(code_challenge))
                    loginUrl += $"&code_challenge={Uri.EscapeDataString(code_challenge)}";
                if (!string.IsNullOrEmpty(code_challenge_method))
                    loginUrl += $"&code_challenge_method={Uri.EscapeDataString(code_challenge_method)}";

                Navigation.NavigateTo(loginUrl);
            }
            else
            {
                Navigation.NavigateTo("/dashboard");
            }
        }
        catch
        {
            errorMessage = "An error occurred during login processing.";
        }
    }
}