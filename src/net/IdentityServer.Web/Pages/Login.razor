@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation


<PageTitle>Sign In - Identity Server</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h1>Sign In</h1>
            @if (!string.IsNullOrEmpty(clientName))
            {
                <p>@clientName is requesting access to your account</p>
            }
            else
            {
                <p>Sign in to your account to continue</p>
            }
        </div>

        <div class="login-form-container">
            <!-- Login con Email/Password -->
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="login-form">
                <DataAnnotationsValidator />
                <ValidationSummary class="validation-summary" />

                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="Enter your password" />
                    <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn-login" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="loading-spinner"></span>
                        }
                        Sign In
                    </button>
                </div>
            </EditForm>

            <!-- Separador -->
            <div class="login-divider">
                <span>or</span>
            </div>

            <!-- Login con Google -->
            <div class="google-login-section">
                <button @onclick="HandleGoogleLogin" class="btn-google" disabled="@isLoading">
                    <svg class="google-icon" viewBox="0 0 24 24">
                        <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                        <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                        <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                        <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                    </svg>
                    Sign in with Google
                </button>
            </div>

            @if (!string.IsNullOrEmpty(clientId))
            {
                <div class="demo-credentials">
                    <small>Demo: admin@example.com / Admin123!</small>
                </div>
            }
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                @errorMessage
            </div>
        }

        <div class="login-footer">
            <p>Don't have an account? <a href="/register@(BuildQueryString())">Create one</a></p>
        </div>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
    }

    .login-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
        padding: 40px;
        animation: slideUp 0.5s ease-out;
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .login-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .login-header h1 {
        color: #333;
        font-size: 28px;
        font-weight: 700;
        margin: 0 0 8px 0;
    }

    .login-header p {
        color: #666;
        font-size: 16px;
        margin: 0;
    }

    .login-form-container {
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 6px;
        color: #333;
        font-weight: 500;
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: #00c896;
        box-shadow: 0 0 0 3px rgba(0, 200, 150, 0.1);
    }

    .form-actions {
        margin-top: 24px;
    }

    .btn-login {
        width: 100%;
        padding: 14px 20px;
        background: #00c896;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-login:hover:not(:disabled) {
        background: #00a876;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 200, 150, 0.3);
    }

    .btn-login:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .loading-spinner {
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top: 2px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .login-divider {
        margin: 24px 0;
        position: relative;
        text-align: center;
    }

    .login-divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: #e1e5e9;
    }

    .login-divider span {
        background: white;
        padding: 0 16px;
        color: #666;
        font-size: 14px;
        position: relative;
    }

    .btn-google {
        width: 100%;
        padding: 12px 20px;
        background: white;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        color: #333;
    }

    .btn-google:hover:not(:disabled) {
        border-color: #ddd;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transform: translateY(-1px);
    }

    .btn-google:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .google-icon {
        width: 20px;
        height: 20px;
    }

    .demo-credentials {
        text-align: center;
        margin-top: 16px;
    }

    .demo-credentials small {
        color: #999;
        font-size: 12px;
    }

    .error-message {
        background: #fee;
        color: #c53030;
        padding: 12px 16px;
        border-radius: 8px;
        border: 1px solid #fed7d7;
        margin-top: 16px;
        font-size: 14px;
    }

    .validation-summary {
        background: #fee;
        color: #c53030;
        padding: 12px 16px;
        border-radius: 8px;
        border: 1px solid #fed7d7;
        margin-bottom: 16px;
        font-size: 14px;
    }

        .validation-summary ul {
            margin: 0;
            padding-left: 20px;
        }

    .validation-message {
        color: #c53030;
        font-size: 12px;
        margin-top: 4px;
        display: block;
    }

    .login-footer {
        text-align: center;
        margin-top: 24px;
        padding-top: 24px;
        border-top: 1px solid #e1e5e9;
    }

    .login-footer p {
        color: #666;
        font-size: 14px;
        margin: 0;
    }

    .login-footer a {
        color: #00c896;
        text-decoration: none;
        font-weight: 500;
    }

    .login-footer a:hover {
        text-decoration: underline;
    }

    /* Responsive Design */
    @@media (max-width: 480px) {
        .login-container {
            padding: 15px;
        }

        .login-card {
            padding: 30px 25px;
        }

        .login-header h1 {
            font-size: 24px;
        }

        .form-control {
            font-size: 16px; /* Prevents zoom on iOS */
        }
    }
</style>

@code {
    [Parameter] [SupplyParameterFromQuery] public string? client_id { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? redirect_uri { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? response_type { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? scope { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? state { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? code_challenge { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? code_challenge_method { get; set; }
    [Parameter] [SupplyParameterFromQuery] public bool api_callback { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? error { get; set; }

    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string clientName = string.Empty;
    private string clientId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        clientId = client_id ?? string.Empty;

        // Check for error from Google login redirect
        if (!string.IsNullOrEmpty(error))
        {
            if (error == "no_account")
            {
                errorMessage = "No account found with this Google account. Please create an account first.";
            }
        }
        
        // Store parameters to avoid losing them during form submission
        if (!string.IsNullOrEmpty(client_id))
        {
            await JSRuntime.InvokeVoidAsync("debugLog", $"OnInitialized - client_id: {client_id}, redirect_uri: {redirect_uri}");
        }
        
        if (!string.IsNullOrEmpty(clientId))
        {
            try
            {
                var response = await Http.GetAsync($"https://localhost:5000/api/clients/{clientId}");
                if (response.IsSuccessStatusCode)
                {
                    var clientInfo = await response.Content.ReadFromJsonAsync<ClientInfo>();
                    clientName = clientInfo?.ClientName ?? clientId;
                }
                else
                {
                    clientName = clientId;
                }
            }
            catch
            {
                clientName = clientId;
            }
        }
    }

    private async Task HandleLogin()
    {
        if (isLoading) return;

        // Validate the form
        if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            errorMessage = "Please enter your email and password.";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            await JSRuntime.InvokeVoidAsync("debugLog", $"HandleLogin started - api_callback: {api_callback}");

            // Always use OIDC form submission for consistency
            await HandleOidcFormSubmission();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("debugLog", $"Exception in HandleLogin: {ex.Message}");
            errorMessage = "An error occurred during login. Please try again.";
            isLoading = false;
        }
    }

    private async Task HandleOidcFormSubmission()
    {
        await JSRuntime.InvokeVoidAsync("debugLog", "Submitting OIDC form to API via browser navigation...");

        // Build form submission URL with query parameters for GET request first
        var queryParams = new List<string>
        {
            $"email={Uri.EscapeDataString(loginModel.Email)}",
            $"password={Uri.EscapeDataString(loginModel.Password)}",
            $"client_id={Uri.EscapeDataString(client_id ?? "")}",
            $"redirect_uri={Uri.EscapeDataString(redirect_uri ?? "")}",
            $"response_type={Uri.EscapeDataString(response_type ?? "code")}",
            $"scope={Uri.EscapeDataString(scope ?? "")}"
        };

        if (!string.IsNullOrEmpty(state))
            queryParams.Add($"state={Uri.EscapeDataString(state)}");
        if (!string.IsNullOrEmpty(code_challenge))
            queryParams.Add($"code_challenge={Uri.EscapeDataString(code_challenge)}");
        if (!string.IsNullOrEmpty(code_challenge_method))
            queryParams.Add($"code_challenge_method={Uri.EscapeDataString(code_challenge_method)}");

        // Create a direct form submission using JSInterop
        await JSRuntime.InvokeVoidAsync("submitOidcForm", new
        {
            email = loginModel.Email,
            password = loginModel.Password,
            client_id = client_id ?? "",
            redirect_uri = redirect_uri ?? "",
            response_type = response_type ?? "code",
            scope = scope ?? "",
            state = state ?? "",
            code_challenge = code_challenge ?? "",
            code_challenge_method = code_challenge_method ?? ""
        });
    }

    private async Task HandleExternalLogin(string provider)
    {
        if (isLoading) return;
        isLoading = true;

        try
        {
            var returnUrl = BuildReturnUrl();
            var externalUrl = $"https://localhost:5000/api/auth/external/{provider.ToLower()}?returnUrl={Uri.EscapeDataString(returnUrl)}";
            await JSRuntime.InvokeVoidAsync("open", externalUrl, "_self");
        }
        catch
        {
            errorMessage = "An error occurred during external login. Please try again.";
            isLoading = false;
        }
    }

    private async Task HandleGoogleLogin()
    {
        await HandleExternalLogin("Google");
    }

    private async Task HandleMicrosoftLogin()
    {
        await HandleExternalLogin("Microsoft");
    }

    private async Task HandleAppleLogin()
    {
        await HandleExternalLogin("Apple");
    }


    private string BuildReturnUrl()
    {
        var queryParams = new List<string>();

        if (!string.IsNullOrEmpty(client_id))
            queryParams.Add($"client_id={Uri.EscapeDataString(client_id)}");
        if (!string.IsNullOrEmpty(redirect_uri))
            queryParams.Add($"redirect_uri={Uri.EscapeDataString(redirect_uri)}");
        if (!string.IsNullOrEmpty(response_type))
            queryParams.Add($"response_type={Uri.EscapeDataString(response_type)}");
        if (!string.IsNullOrEmpty(scope))
            queryParams.Add($"scope={Uri.EscapeDataString(scope)}");
        if (!string.IsNullOrEmpty(state))
            queryParams.Add($"state={Uri.EscapeDataString(state)}");
        if (!string.IsNullOrEmpty(code_challenge))
            queryParams.Add($"code_challenge={Uri.EscapeDataString(code_challenge)}");
        if (!string.IsNullOrEmpty(code_challenge_method))
            queryParams.Add($"code_challenge_method={Uri.EscapeDataString(code_challenge_method)}");

        var baseUrl = Navigation.ToAbsoluteUri("/external-callback").ToString();
        return queryParams.Any() ? $"{baseUrl}?{string.Join("&", queryParams)}" : baseUrl;
    }

    private string BuildQueryString()
    {
        var queryParams = new List<string>();

        if (!string.IsNullOrEmpty(client_id))
            queryParams.Add($"client_id={Uri.EscapeDataString(client_id)}");
        if (!string.IsNullOrEmpty(redirect_uri))
            queryParams.Add($"redirect_uri={Uri.EscapeDataString(redirect_uri)}");
        if (!string.IsNullOrEmpty(response_type))
            queryParams.Add($"response_type={Uri.EscapeDataString(response_type)}");
        if (!string.IsNullOrEmpty(scope))
            queryParams.Add($"scope={Uri.EscapeDataString(scope)}");
        if (!string.IsNullOrEmpty(state))
            queryParams.Add($"state={Uri.EscapeDataString(state)}");
        if (!string.IsNullOrEmpty(code_challenge))
            queryParams.Add($"code_challenge={Uri.EscapeDataString(code_challenge)}");
        if (!string.IsNullOrEmpty(code_challenge_method))
            queryParams.Add($"code_challenge_method={Uri.EscapeDataString(code_challenge_method)}");

        return queryParams.Any() ? $"?{string.Join("&", queryParams)}" : string.Empty;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    public class ClientInfo
    {
        public string ClientName { get; set; } = string.Empty;
    }
}